//
// This file was generated by the Eclipse Implementation of JAXB, v2.3.7 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2024.09.25 at 04:23:30 PM PDT 
//


package _int.iho.s100symboldefinition._5;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;


/**
 * A class for numeric textual annotations of values in a Coverage
 * 
 * <p>Java class for NumericAnnotation complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="NumericAnnotation"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;group ref="{http://www.iho.int/S100SymbolDefinition/5.2}Font"/&gt;
 *         &lt;element name="color" type="{http://www.iho.int/S100SymbolDefinition/5.2}Color"/&gt;
 *       &lt;/sequence&gt;
 *       &lt;attribute name="decimals" type="{http://www.w3.org/2001/XMLSchema}int" default="1" /&gt;
 *       &lt;attribute name="bodySize" use="required" type="{http://www.w3.org/2001/XMLSchema}double" /&gt;
 *       &lt;attribute name="buffer" type="{http://www.w3.org/2001/XMLSchema}double" default="0" /&gt;
 *       &lt;attribute name="champion" type="{http://www.iho.int/S100SymbolDefinition/5.2}ChampionChoice" default="Smallest" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "NumericAnnotation", propOrder = {
    "fontCharacteristics",
    "fontReference",
    "color"
})
public class NumericAnnotation {

    protected FontCharacteristics fontCharacteristics;
    protected FontReference fontReference;
    @XmlElement(required = true)
    protected Color color;
    @XmlAttribute(name = "decimals")
    protected Integer decimals;
    @XmlAttribute(name = "bodySize", required = true)
    protected double bodySize;
    @XmlAttribute(name = "buffer")
    protected Double buffer;
    @XmlAttribute(name = "champion")
    protected ChampionChoice champion;

    /**
     * Gets the value of the fontCharacteristics property.
     * 
     * @return
     *     possible object is
     *     {@link FontCharacteristics }
     *     
     */
    public FontCharacteristics getFontCharacteristics() {
        return fontCharacteristics;
    }

    /**
     * Sets the value of the fontCharacteristics property.
     * 
     * @param value
     *     allowed object is
     *     {@link FontCharacteristics }
     *     
     */
    public void setFontCharacteristics(FontCharacteristics value) {
        this.fontCharacteristics = value;
    }

    /**
     * Gets the value of the fontReference property.
     * 
     * @return
     *     possible object is
     *     {@link FontReference }
     *     
     */
    public FontReference getFontReference() {
        return fontReference;
    }

    /**
     * Sets the value of the fontReference property.
     * 
     * @param value
     *     allowed object is
     *     {@link FontReference }
     *     
     */
    public void setFontReference(FontReference value) {
        this.fontReference = value;
    }

    /**
     * Gets the value of the color property.
     * 
     * @return
     *     possible object is
     *     {@link Color }
     *     
     */
    public Color getColor() {
        return color;
    }

    /**
     * Sets the value of the color property.
     * 
     * @param value
     *     allowed object is
     *     {@link Color }
     *     
     */
    public void setColor(Color value) {
        this.color = value;
    }

    /**
     * Gets the value of the decimals property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public int getDecimals() {
        if (decimals == null) {
            return  1;
        } else {
            return decimals;
        }
    }

    /**
     * Sets the value of the decimals property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setDecimals(Integer value) {
        this.decimals = value;
    }

    /**
     * Gets the value of the bodySize property.
     * 
     */
    public double getBodySize() {
        return bodySize;
    }

    /**
     * Sets the value of the bodySize property.
     * 
     */
    public void setBodySize(double value) {
        this.bodySize = value;
    }

    /**
     * Gets the value of the buffer property.
     * 
     * @return
     *     possible object is
     *     {@link Double }
     *     
     */
    public double getBuffer() {
        if (buffer == null) {
            return  0.0D;
        } else {
            return buffer;
        }
    }

    /**
     * Sets the value of the buffer property.
     * 
     * @param value
     *     allowed object is
     *     {@link Double }
     *     
     */
    public void setBuffer(Double value) {
        this.buffer = value;
    }

    /**
     * Gets the value of the champion property.
     * 
     * @return
     *     possible object is
     *     {@link ChampionChoice }
     *     
     */
    public ChampionChoice getChampion() {
        if (champion == null) {
            return ChampionChoice.SMALLEST;
        } else {
            return champion;
        }
    }

    /**
     * Sets the value of the champion property.
     * 
     * @param value
     *     allowed object is
     *     {@link ChampionChoice }
     *     
     */
    public void setChampion(ChampionChoice value) {
        this.champion = value;
    }

}

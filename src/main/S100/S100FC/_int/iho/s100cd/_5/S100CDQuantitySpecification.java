//
// This file was generated by the Eclipse Implementation of JAXB, v2.3.7 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2024.09.25 at 04:22:14 PM PDT 
//


package _int.iho.s100cd._5;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for S100_CD_QuantitySpecification.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <pre>
 * &lt;simpleType name="S100_CD_QuantitySpecification"&gt;
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string"&gt;
 *     &lt;enumeration value="angularVelocity"/&gt;
 *     &lt;enumeration value="area"/&gt;
 *     &lt;enumeration value="density"/&gt;
 *     &lt;enumeration value="duration"/&gt;
 *     &lt;enumeration value="frequency"/&gt;
 *     &lt;enumeration value="length"/&gt;
 *     &lt;enumeration value="mass"/&gt;
 *     &lt;enumeration value="planeAngle"/&gt;
 *     &lt;enumeration value="power"/&gt;
 *     &lt;enumeration value="pressure"/&gt;
 *     &lt;enumeration value="salinity"/&gt;
 *     &lt;enumeration value="speed"/&gt;
 *     &lt;enumeration value="temperature"/&gt;
 *     &lt;enumeration value="volume"/&gt;
 *     &lt;enumeration value="weight"/&gt;
 *     &lt;enumeration value="otherQuantity"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 * 
 */
@XmlType(name = "S100_CD_QuantitySpecification")
@XmlEnum
public enum S100CDQuantitySpecification {


    /**
     * The instantaneous rate of change of angular displacement with time
     * 
     */
    @XmlEnumValue("angularVelocity")
    ANGULAR_VELOCITY("angularVelocity"),

    /**
     * The measure of the physical extent of any two-dimensional geometric object
     * 
     */
    @XmlEnumValue("area")
    AREA("area"),

    /**
     * Mass per unit volume; number per unit area. Also: specific gravity (S-32). Density of soundings is the intervals between lines of sounding and soundings in the same line (S-32)
     * 
     */
    @XmlEnumValue("density")
    DENSITY("density"),

    /**
     * Interval of time
     * 
     */
    @XmlEnumValue("duration")
    DURATION("duration"),

    /**
     * Number of vibrations or cycles per unit time
     * 
     */
    @XmlEnumValue("frequency")
    FREQUENCY("frequency"),

    /**
     * The longest dimension of an object; distance measured along a line or curve
     * 
     */
    @XmlEnumValue("length")
    LENGTH("length"),

    /**
     * A numerical measure of the inertia of an object; the quantity of matter which a body contains, irrespective of its bulk or volume
     * 
     */
    @XmlEnumValue("mass")
    MASS("mass"),

    /**
     * The amount of rotation needed to bring one line or plane into coincidence with another, generally measured in radians or degrees
     * 
     */
    @XmlEnumValue("planeAngle")
    PLANE_ANGLE("planeAngle"),

    /**
     * Rate of doing work or transferring energy; magnification
     * 
     */
    @XmlEnumValue("power")
    POWER("power"),

    /**
     * Force per unit area
     * 
     */
    @XmlEnumValue("pressure")
    PRESSURE("pressure"),

    /**
     * A measure of the quantity of dissolved salts
     * 
     */
    @XmlEnumValue("salinity")
    SALINITY("salinity"),

    /**
     * Rate of change of position with time
     * 
     */
    @XmlEnumValue("speed")
    SPEED("speed"),

    /**
     * The intensity or degree of heat
     * 
     */
    @XmlEnumValue("temperature")
    TEMPERATURE("temperature"),

    /**
     * The measure of the physical space of any 3-D geometric object
     * 
     */
    @XmlEnumValue("volume")
    VOLUME("volume"),

    /**
     * The force experienced by an object due to gravity
     * 
     */
    @XmlEnumValue("weight")
    WEIGHT("weight"),

    /**
     * A quantity different from the other literals of this enumeration
     * 
     */
    @XmlEnumValue("otherQuantity")
    OTHER_QUANTITY("otherQuantity");
    private final String value;

    S100CDQuantitySpecification(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static S100CDQuantitySpecification fromValue(String v) {
        for (S100CDQuantitySpecification c: S100CDQuantitySpecification.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}

//
// This file was generated by the Eclipse Implementation of JAXB, v2.3.7 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2024.09.25 at 04:22:14 PM PDT 
//


package _int.iho.s100cd._5;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for S100_CD_FeatureUseType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <pre>
 * &lt;simpleType name="S100_CD_FeatureUseType"&gt;
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string"&gt;
 *     &lt;enumeration value="geographic"/&gt;
 *     &lt;enumeration value="meta"/&gt;
 *     &lt;enumeration value="cartographic"/&gt;
 *     &lt;enumeration value="theme"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 * 
 */
@XmlType(name = "S100_CD_FeatureUseType")
@XmlEnum
public enum S100CDFeatureUseType {


    /**
     * carries the descriptive characteristics of a real world entity
     * 
     */
    @XmlEnumValue("geographic")
    GEOGRAPHIC("geographic"),

    /**
     * Delineates geographic location where meta information is applicable‚Äù distinct from an Information Type which carries information related to features which are related
     * 
     */
    @XmlEnumValue("meta")
    META("meta"),

    /**
     * carries information about the cartographic representation (including text) of a real world entity
     * 
     */
    @XmlEnumValue("cartographic")
    CARTOGRAPHIC("cartographic"),

    /**
     * Grouping features thematically
     * 
     */
    @XmlEnumValue("theme")
    THEME("theme");
    private final String value;

    S100CDFeatureUseType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static S100CDFeatureUseType fromValue(String v) {
        for (S100CDFeatureUseType c: S100CDFeatureUseType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}

//
// This file was generated by the Eclipse Implementation of JAXB, v2.3.7 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2024.09.25 at 04:22:14 PM PDT 
//


package _int.iho.s100fc._5;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for S100_FC_RoleType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <pre>
 * &lt;simpleType name="S100_FC_RoleType"&gt;
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string"&gt;
 *     &lt;enumeration value="association"/&gt;
 *     &lt;enumeration value="aggregation"/&gt;
 *     &lt;enumeration value="composition"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 * 
 */
@XmlType(name = "S100_FC_RoleType")
@XmlEnum
public enum S100FCRoleType {


    /**
     * The association end is an ordinary linkage. (In UML terms, the role type is “aggregationKind=ordinary” and the link in a diagram does not have a diamond)
     * 
     */
    @XmlEnumValue("association")
    ASSOCIATION("association"),

    /**
     * The association end is a UML aggregation. (In UML terms, the role type is “aggregationKind=aggregation” and the link in a diagram has an unfilled diamond at this association end)
     * 
     */
    @XmlEnumValue("aggregation")
    AGGREGATION("aggregation"),

    /**
     * The association end is a UML aggregation. (In UML terms, the role type is “aggregationKind=composition” and the link in a diagram has a filled diamond at this association end)
     * 
     */
    @XmlEnumValue("composition")
    COMPOSITION("composition");
    private final String value;

    S100FCRoleType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static S100FCRoleType fromValue(String v) {
        for (S100FCRoleType c: S100FCRoleType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}

//
// This file was generated by the Eclipse Implementation of JAXB, v2.3.7 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2024.09.25 at 04:24:11 PM PDT 
//


package _int.iho.s100gml._5;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for S100_GM_KnotTypeType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <pre>
 * &lt;simpleType name="S100_GM_KnotTypeType"&gt;
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string"&gt;
 *     &lt;enumeration value="uniform"/&gt;
 *     &lt;enumeration value="quasiUniform"/&gt;
 *     &lt;enumeration value="piecewiseBezier"/&gt;
 *     &lt;enumeration value="nonUniform"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 * 
 */
@XmlType(name = "S100_GM_KnotTypeType")
@XmlEnum
public enum S100GMKnotTypeType {


    /**
     * knots are equally spaced, all multiplicity 1
     * 
     */
    @XmlEnumValue("uniform")
    UNIFORM("uniform"),

    /**
     * the interior knots are uniform, but the first and last have multiplicity one larger than the degree of the spline
     * 
     */
    @XmlEnumValue("quasiUniform")
    QUASI_UNIFORM("quasiUniform"),

    /**
     * the underlying spline is formally a Bézier spline, but knot multiplicity is always the degree of the spline except at the ends where the knot degree is (p+1). Such a spline is a pure Bézier spline between its distinct knots
     * 
     */
    @XmlEnumValue("piecewiseBezier")
    PIECEWISE_BEZIER("piecewiseBezier"),

    /**
     * knots have varying spacing and multiplicity
     * 
     */
    @XmlEnumValue("nonUniform")
    NON_UNIFORM("nonUniform");
    private final String value;

    S100GMKnotTypeType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static S100GMKnotTypeType fromValue(String v) {
        for (S100GMKnotTypeType c: S100GMKnotTypeType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
